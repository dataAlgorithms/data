In [88]: x = [1, 2, 3, 4]

In [89]: y = [5, 6, 7, 8]

In [90]: x * 2
Out[90]: [1, 2, 3, 4, 1, 2, 3, 4]

In [91]: x + 10
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-91-f51880e8756d> in <module>()
----> 1 x + 10

TypeError: can only concatenate list (not "int") to list

In [92]: x + y
Out[92]: [1, 2, 3, 4, 5, 6, 7, 8]

In [93]: import numpy as np

In [94]: ax = np.array([1, 2, 3, 4])

In [95]: ay = np.array([5, 6, 7, 8])

In [96]: ax * 2
Out[96]: array([2, 4, 6, 8])

In [97]: ax + 10
Out[97]: array([11, 12, 13, 14])

In [98]: ax + ay
Out[98]: array([ 6,  8, 10, 12])

In [99]: def f(x):
    ...:     return 3*x**2 - 2*x + 7
    ...:

In [100]: f(ax)
Out[100]: array([ 8, 15, 28, 47])

In [101]: np.sqrt(ax)
Out[101]: array([ 1.        ,  1.41421356,  1.73205081,  2.        ])

In [102]: np.cos(ax)
Out[102]: array([ 0.54030231, -0.41614684, -0.9899925 , -0.65364362])

In [103]: grid = np.zeros(shape=(10000,10000), dtype=float)

In [104]: grid
Out[104]:
array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       ...,
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])

In [105]: grid += 10

In [106]: grid
Out[106]:
array([[ 10.,  10.,  10., ...,  10.,  10.,  10.],
       [ 10.,  10.,  10., ...,  10.,  10.,  10.],
       [ 10.,  10.,  10., ...,  10.,  10.,  10.],
       ...,
       [ 10.,  10.,  10., ...,  10.,  10.,  10.],
       [ 10.,  10.,  10., ...,  10.,  10.,  10.],
       [ 10.,  10.,  10., ...,  10.,  10.,  10.]])

In [107]: np.sin(grid)
Out[107]:
array([[-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
        -0.54402111, -0.54402111],
       [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
        -0.54402111, -0.54402111],
       [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
        -0.54402111, -0.54402111],
       ...,
       [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
        -0.54402111, -0.54402111],
       [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
        -0.54402111, -0.54402111],
       [-0.54402111, -0.54402111, -0.54402111, ..., -0.54402111,
        -0.54402111, -0.54402111]])

In [108]: a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

In [109]: a
Out[109]:
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])

In [110]: a[1]
Out[110]: array([5, 6, 7, 8])

In [111]: a[:,1]
Out[111]: array([ 2,  6, 10])

In [112]: a[1:3, 1:3]
Out[112]:
array([[ 6,  7],
       [10, 11]])

In [113]: a[1:3, 1:3] += 10

In [114]: a
Out[114]:
array([[ 1,  2,  3,  4],
       [ 5, 16, 17,  8],
       [ 9, 20, 21, 12]])

In [115]: a + [100, 101, 102, 103]
Out[115]:
array([[101, 103, 105, 107],
       [105, 117, 119, 111],
       [109, 121, 123, 115]])

In [116]: a
Out[116]:
array([[ 1,  2,  3,  4],
       [ 5, 16, 17,  8],
       [ 9, 20, 21, 12]])

In [117]: np.where(a < 10, a, 10)
Out[117]:
array([[ 1,  2,  3,  4],
       [ 5, 10, 10,  8],
       [ 9, 10, 10, 10]])
